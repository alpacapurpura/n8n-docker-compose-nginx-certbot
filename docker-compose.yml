version: '3.8'

volumes:
  n8n_storage:
  postgres_storage:
  # REMOVE THIS LINE: ollama_storage:
  qdrant_storage:
  nginx_certs:
  nginx_vhost:
  nginx_html:
  n8n_logs:

networks:
  demo:
    driver: bridge
  nginx-proxy:
    driver: bridge

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo', 'nginx-proxy']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    # REMOVE THIS LINE: - OLLAMA_HOST=ollama:11434
    - N8N_HOST=${N8N_HOST}
    - WEBHOOK_URL=${WEBHOOK_URL}
    - VIRTUAL_HOST=${VIRTUAL_HOST}
    - LETSENCRYPT_HOST=${VIRTUAL_HOST}
    - LETSENCRYPT_EMAIL=${CERTBOT_EMAIL}
    - N8N_LOG_LEVEL=info
    - N8N_LOG_OUTPUT=file
    - N8N_LOG_FILE_LOCATION=/home/node/.n8n/logs/n8n.log
    - N8N_LOG_FILE_MAX_SIZE=10485760
    - N8N_LOG_FILE_MAX_FILES=10

services:
  # Servicio Nginx + Certbot
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    labels:
      - "com.github.nginx-proxy.nginx-proxy"  # Para que se ejecute certbot
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nginx-proxy
      - demo
    volumes:
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      - DEFAULT_HOST=${VIRTUAL_HOST}

  certbot:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: certbot
    restart: unless-stopped
    depends_on:
      - nginx-proxy
    networks:
      - nginx-proxy
      - demo
    volumes:
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy  # Variable explícita

  # Servicio Postgres (existente)
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['demo']
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # Servicio n8n principal (modificado)
  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    volumes:
      - n8n_storage:/home/node/.n8n
      - n8n_logs:/home/node/.n8n/logs
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy

  # Servicios adicionales (Ollama, Qdrant - mantener configuración original)
  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  # Remove entire ollama-cpu service block
  # ollama-cpu:
  #   image: ollama/ollama:latest
  #   container_name: ollama
  #   networks: ['demo']
  #   restart: unless-stopped
  #   ports:
  #     - 11434:11434
  #   volumes:
  #     - ollama_storage:/root/.ollama